<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>StarBlog</title><link>https://blog.star03.me/</link><description>Recent content on StarBlog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>TwinkleStar03</copyright><lastBuildDate>Thu, 01 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.star03.me/index.xml" rel="self" type="application/rss+xml"/><item><title>DEFCON2023 - opacity</title><link>https://blog.star03.me/posts/2023/06/defcon-quals-opacity/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.star03.me/posts/2023/06/defcon-quals-opacity/</guid><description>Writeup of the reverse challenge Opacity in DEFCON2023 Quals: A DRM-protected circuit emulation.
I found this challenge to be highly intriguing, as it took us a considerable amount of time to unravel its true purpose. The implementation of a fundamental gate in this challenge was particularly fascinating, which is why I felt compelled to create a detailed writeup for it.
DRM Protected Environment (init_drm) The DRM is actually a patched qemu-aarch64 which will use user provided license as PAC key.</description><content>&lt;hr>
&lt;p>Writeup of the reverse challenge &lt;code>Opacity&lt;/code> in DEFCON2023 Quals: A DRM-protected circuit emulation.&lt;/p>
&lt;p>I found this challenge to be highly intriguing, as it took us a considerable amount of time to unravel its true purpose.
The implementation of a fundamental gate in this challenge was particularly fascinating, which is why I felt compelled to create a detailed writeup for it.&lt;/p>
&lt;h2 id="drm-protected-environment-init_drm">DRM Protected Environment (&lt;code>init_drm&lt;/code>)&lt;/h2>
&lt;p>The DRM is actually a patched &lt;code>qemu-aarch64&lt;/code> which will use user provided license as PAC key.&lt;/p>
&lt;p>This is how PAC key is set:&lt;/p>
&lt;ul>
&lt;li>license is a 16-bytes sequence, which will applied to &lt;code>qemu_base+0x48D390&lt;/code> @ &lt;code>.rodata&lt;/code>&lt;/li>
&lt;li>&lt;code>qemu_base+0x22BCCC&lt;/code>(&lt;a href="https://github.com/qemu/qemu/blob/master/linux-user/aarch64/target_prctl.h#L106">do_prctl_reset_keys&lt;/a>) is replaced with code that perform &lt;code>memcpy&lt;/code> from &lt;code>qemu_base+0x48D390&lt;/code> to &lt;code>PAC_KEY_B&lt;/code> (&lt;code>&amp;amp;env-&amp;gt;keys.apib&lt;/code>)&lt;/li>
&lt;li>A runtime (&lt;code>init_drm&lt;/code>) perform patch and &lt;code>exec&lt;/code> itself to a patched qemu and run circuit emulator (&lt;code>run_prog&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h2 id="run_prog-circuit-emulator">&lt;code>run_prog&lt;/code> (Circuit Emulator)&lt;/h2>
&lt;h3 id="pac-as-nand">PAC as NAND&lt;/h3>
&lt;p>Using PAC operation as a way to inhibit the nature of bitwise operation is such a cool idea.&lt;/p>
&lt;p>Here&amp;rsquo;s how PAC as NAND is made:&lt;/p>
&lt;p>Every gate have two output state (0 or 1):&lt;/p>
&lt;ul>
&lt;li>Use a random number to represent the state 0 or 1
Building NAND gate:&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Suppose GateA and GateB both output 1, therefore we have two random that represent 1 here (we called it &lt;code>gateA_rand_1&lt;/code> and &lt;code>gateB_rand_1&lt;/code>)&lt;/li>
&lt;li>Use &lt;code>gateA_rand_1&lt;/code> as Pointer and &lt;code>gateB_rand_1&lt;/code> as modifier, thus we&amp;rsquo;ll get &lt;code>result_pac&lt;/code> which is signed &lt;code>gateA_rand_1&lt;/code>&lt;/li>
&lt;li>Check other cases, where GateA and GateB will output (00, 01, 10), AUT should fail in those cases
&lt;ul>
&lt;li>If the check failed, the modifier got incremented (modifier++)&lt;/li>
&lt;li>Repeat until all check success&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Save information for NAND
&lt;ul>
&lt;li>Random values for 0 and 1 from both input&lt;/li>
&lt;li>Modifier increment&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Using(Evaluate) NAND Gate:&lt;/p>
&lt;ol>
&lt;li>Acquire output state numbers from both input&lt;/li>
&lt;li>Perform AUT
&lt;ul>
&lt;li>If success, then both output is 1&lt;/li>
&lt;li>If failed, output might be (00, 01, 10)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Left shift the AUT result, leave the high byte there
&lt;ul>
&lt;li>If the AUT success the number will be original value where LSB should be &lt;code>000000&lt;/code>&lt;/li>
&lt;li>If the AUT failed the number will be invalidate where LSB leave non-zero number&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use the shifted result as output of NAND gate
&lt;ul>
&lt;li>The PAC perform AND operation, and shift perform NOT operation, which result in NAND gate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;h3 id="figure-out-opcodes">Figure Out Opcodes&lt;/h3>
&lt;p>After our team get a consensus about the VM and the circuit, we found out it&amp;rsquo;s actually a CPU run a tiny program on it.
We attempt to guess all the opcode one by one by observing the state of the machine before/after an operation is done.&lt;/p>
&lt;p>After we built a opcode table, we can start disassemble target program.&lt;/p>
&lt;h3 id="bytecode-disassembly">Bytecode Disassembly&lt;/h3>
&lt;p>The program makes a checksum based on user-input. We can just brute-force this checksum function to find a valid input and send it to remote server.&lt;/p>
&lt;pre tabindex="0">&lt;code>0: 00000100
1: 11000111 cmp r0, 0x00
2: 00100110 jmp 4
3: 11000100 invalid
4: 00001000 read
5: 00000111 cmp r0, 0x3f
6: 01000110 jz 8
7: 01000100 hlt
8: 00111011 add r3, 0x3f
9: 00001000 read
10: 11000111 cmp r0, 0x00
11: 10111110 jz TLE
12: 00011011 mul r1, 0x3f
13: 10100001 ROT3 r2, 2
14: 11110001 ROT3 r3, 3
15: 00101001 XOR r2, r0
16: 00111001 XOR r3, r0
17: 01010001 ROT3 r1, 1
18: 10100110 jz 20; break
19: 01001010 jmp 9
20: 00001000 read
21: 00000111 cmp r0, 0x3f
22: 11000110 jz 24
23: 10111010 TLE ; jmp 23
24: 01100111 cmp r2, 0xd5
25: 11011110 jz 27
26: 10111010 TLE
27: 10110111 cmp r3, 0x54
28: 11110110 jz 30; FLG
29: 10111010 TLE
30: 01100000 FLG
31: 00000000
&lt;/code>&lt;/pre></content></item><item><title>\# whoami</title><link>https://blog.star03.me/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.star03.me/about/</guid><description> Username: TwinkleStar03 Email: echo &amp;quot;c3RhckB0d2lua2xlc3RhcjAzLmNvbQo=&amp;quot; | base64 -d Discord: star.03 NYCU CSIT Security Research Intern @ CyCraft (2023~) Reverse / Pwnable / Game Hacking
Cyber Security Experiences CTFs 2023 DEFCON 2023 - Finalist - TWN48 2022 Flare-On Challenges 9 - Solved all 11 challenges DEFCON 2022 - Finalist - Balsn.217@TSJ.tw 1337UP LIVE CTF - 8th - XxTSJxX AIS3 EOF 2022 Final - 1st - meow? 2021 資安技能金盾獎 2021 - 1st - 我不知道隊名 Pwn2Win CTF 2021 - 15th - XxTSJxX DEFCON CTF Qualifier 2021 - 23th - XxTSJxX VolgaCTF 2021 Qualifier - 9th - XxTSJxX Midnight Sun CTF 2021 Quals - 16th - XxTSJxX AIS3 EOF 2021 Final - 5th - CTF2NOP HITCON x Balsn Taiwan CTF - 5th - Brain2NOP Zyxel榮耀資戰(一般組) Final - 6th - Ret2NOP 2020 RuCTFE 2020 RedPwnCTF 2020 ångstromCTF 2020 2019 HITCONCTF-2019 Qual MyFirstCTF2019 Public Speaking How to Hack CS:GO @ SITCON2021 探討自動化程式弱點分析 @ 第四屆台灣好厲駭期末發表會 Course Speaker ISIP 資安深根營隊 Pwnable 講師 SCIST 2023 Pwnable 講師 交大網路安全策進社 111 上學期 - Game Hacking 講師 交大網路安全策進社 110 下學期 - 逆向工程講師 交大網路安全策進社 110 上學期 - 逆向工程講師 Misc AIS3 2023 - TA AIS3 EOF 2023 - Challenge Author / 3D CGI Design 台灣好厲駭 第四屆台灣好厲駭 - 結訓學員 第五屆台灣好厲駭 - 結訓學員 AIS3 2020 最佳專題獎 軟體開發安全第五組 Secret Keeper 主要開發者 Ret2NOP Founder Robotic Competition 擔任 FRC Team #7673 隊長與軟體開發組組長 SBPLI Long Island Regional #1 - 榮獲 Individual Excellence SBPLI Long Island Regional #1 - Rookie All-Star Award (取得世界賽資格) FRC CTSP 季後賽 - Creativity Award FRC-CTSP練習賽 - Alliance Winner #1 Taiwan International Robotics Tournament(VEX EDR) - Tournament Champion Taiwan International Robotics Tournament(VEX EDR) - Amaze Award 智能化技術暨機器人國際邀請賽(VEX EDR) - 2nd Asia-Pacific Robotics Championship(VEX EDR) - Bronze Award Community SITCON 2022 - 會眾 HITCON 2022 - 會眾 SITCON 2021 - 講者 HITCON 2020 - 會眾</description><content>&lt;ul>
&lt;li>Username: TwinkleStar03&lt;/li>
&lt;li>Email: &lt;code>echo &amp;quot;c3RhckB0d2lua2xlc3RhcjAzLmNvbQo=&amp;quot; | base64 -d&lt;/code>&lt;/li>
&lt;li>Discord: star.03&lt;/li>
&lt;li>NYCU CSIT&lt;/li>
&lt;li>Security Research Intern @ CyCraft (2023~)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Reverse / Pwnable / Game Hacking&lt;/p>
&lt;/blockquote>
&lt;h2 id="cyber-security-experiences">Cyber Security Experiences&lt;/h2>
&lt;h3 id="ctfs">CTFs&lt;/h3>
&lt;ul>
&lt;li>2023
&lt;ul>
&lt;li>DEFCON 2023 - Finalist - TWN48&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2022
&lt;ul>
&lt;li>Flare-On Challenges 9 - Solved all 11 challenges&lt;/li>
&lt;li>DEFCON 2022 - Finalist - &lt;a href="mailto:Balsn.217@TSJ.tw">Balsn.217@TSJ.tw&lt;/a>&lt;/li>
&lt;li>1337UP LIVE CTF - 8th - XxTSJxX&lt;/li>
&lt;li>AIS3 EOF 2022 Final - 1st - meow?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2021
&lt;ul>
&lt;li>資安技能金盾獎 2021 - 1st - 我不知道隊名&lt;/li>
&lt;li>Pwn2Win CTF 2021 - 15th - XxTSJxX&lt;/li>
&lt;li>DEFCON CTF Qualifier 2021 - 23th - XxTSJxX&lt;/li>
&lt;li>VolgaCTF 2021 Qualifier - 9th - XxTSJxX&lt;/li>
&lt;li>Midnight Sun CTF 2021 Quals - 16th - XxTSJxX&lt;/li>
&lt;li>AIS3 EOF 2021 Final - 5th - CTF2NOP&lt;/li>
&lt;li>HITCON x Balsn Taiwan CTF - 5th - Brain2NOP&lt;/li>
&lt;li>Zyxel榮耀資戰(一般組) Final - 6th - Ret2NOP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2020
&lt;ul>
&lt;li>RuCTFE 2020&lt;/li>
&lt;li>RedPwnCTF 2020&lt;/li>
&lt;li>ångstromCTF 2020&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2019
&lt;ul>
&lt;li>HITCONCTF-2019 Qual&lt;/li>
&lt;li>MyFirstCTF2019&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="public-speaking">Public Speaking&lt;/h3>
&lt;ul>
&lt;li>How to Hack CS:GO @ SITCON2021&lt;/li>
&lt;li>探討自動化程式弱點分析 @ 第四屆台灣好厲駭期末發表會&lt;/li>
&lt;/ul>
&lt;h3 id="course-speaker">Course Speaker&lt;/h3>
&lt;ul>
&lt;li>ISIP 資安深根營隊 Pwnable 講師&lt;/li>
&lt;li>SCIST 2023 Pwnable 講師&lt;/li>
&lt;li>交大網路安全策進社 111 上學期 - Game Hacking 講師&lt;/li>
&lt;li>交大網路安全策進社 110 下學期 - 逆向工程講師&lt;/li>
&lt;li>交大網路安全策進社 110 上學期 - 逆向工程講師&lt;/li>
&lt;/ul>
&lt;h3 id="misc">Misc&lt;/h3>
&lt;ul>
&lt;li>AIS3 2023 - TA&lt;/li>
&lt;li>AIS3 EOF 2023 - Challenge Author / 3D CGI Design&lt;/li>
&lt;li>台灣好厲駭
&lt;ul>
&lt;li>第四屆台灣好厲駭 - 結訓學員&lt;/li>
&lt;li>第五屆台灣好厲駭 - 結訓學員&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>AIS3 2020 最佳專題獎
&lt;ul>
&lt;li>軟體開發安全第五組&lt;/li>
&lt;li>Secret Keeper 主要開發者&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ret2NOP Founder&lt;/li>
&lt;/ul>
&lt;h2 id="robotic-competition">Robotic Competition&lt;/h2>
&lt;ul>
&lt;li>擔任 FRC Team #7673 隊長與軟體開發組組長&lt;/li>
&lt;li>SBPLI Long Island Regional #1 - 榮獲 Individual Excellence&lt;/li>
&lt;li>SBPLI Long Island Regional #1 - Rookie All-Star Award (取得世界賽資格)&lt;/li>
&lt;li>FRC CTSP 季後賽 - Creativity Award&lt;/li>
&lt;li>FRC-CTSP練習賽 - Alliance Winner #1&lt;/li>
&lt;li>Taiwan International Robotics Tournament(VEX EDR) - Tournament Champion&lt;/li>
&lt;li>Taiwan International Robotics Tournament(VEX EDR) - Amaze Award&lt;/li>
&lt;li>智能化技術暨機器人國際邀請賽(VEX EDR) - 2nd&lt;/li>
&lt;li>Asia-Pacific Robotics Championship(VEX EDR) - Bronze Award&lt;/li>
&lt;/ul>
&lt;h2 id="community">Community&lt;/h2>
&lt;ul>
&lt;li>SITCON 2022 - 會眾&lt;/li>
&lt;li>HITCON 2022 - 會眾&lt;/li>
&lt;li>SITCON 2021 - 講者&lt;/li>
&lt;li>HITCON 2020 - 會眾&lt;/li>
&lt;/ul></content></item></channel></rss>